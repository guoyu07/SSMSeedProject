group 'com.github.izhangzhihao'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
    }
}


apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "jacoco"
apply plugin: "idea"

jar {
    baseName = "SSMSeedProject"
    version = "1.0.0-SNAPSHOT"
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "development"
}

test {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "test"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
def ThymeleafVersion = "3.0.5.RELEASE"

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "https://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile(
            // spring framework
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-thymeleaf",
            "org.springframework.boot:spring-boot-starter-jdbc",
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-devtools",

            "org.thymeleaf:thymeleaf:$ThymeleafVersion",
            "org.thymeleaf:thymeleaf-spring4:$ThymeleafVersion",
            "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.2.1",

            //mybatis-spring-boot-starter
            "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0",

            //热部署
            "org.springframework:springloaded:1.2.6.RELEASE",

            //Spring-Session
            //"org.springframework.session:spring-session:1.3.0.RELEASE",
            //"org.springframework.data:spring-data-redis:1.8.1.RELEASE",

            //jedis
            //"redis.clients:jedis:2.9.0",
            //"org.apache.commons:commons-pool2:2.4.2",

            // MySQL
            "mysql:mysql-connector-java:6.0.6",

            "com.h2database:h2",

            //apache
            "commons-fileupload:commons-fileupload:1.3.2",
            "org.apache.commons:commons-lang3:3.4",

            //MyBatis
            //"org.mybatis:mybatis:3.4.1",
            //"org.mybatis:mybatis-spring:1.3.0",
            //"org.mybatis.generator:mybatis-generator-core:1.3.3",
            "com.github.pagehelper:pagehelper:5.0.0",
            //"tk.mybatis:mapper:3.3.8",

            //druid
            "com.alibaba:druid:1.0.29",

            //@NotNull
            "org.jetbrains:annotations:15.0",

            //Lombok
            "org.projectlombok:lombok:1.16.14",

            //webJars
            "org.webjars:jquery:1.12.1",
            "org.webjars:fastclick:1.0.6",
            "org.webjars:html5shiv:3.7.3",
            "org.webjars:jquery-blockui:2.65",
            "org.webjars:jQuery-slimScroll:1.3.8",
            "org.webjars:modernizr:2.8.3",
            "org.webjars:respond:1.4.2",
            "org.webjars:bootstrap:3.3.7-1",
            "org.webjars:pace:1.0.2",
            "org.webjars:sweetalert:1.0.0",
            "org.webjars.bower:waves:0.7.5",
    )
    testCompile(
            //jUnit
            "junit:junit:4.12",
    )
}

task copyJars(type: Copy) {
    from configurations.runtime
    into "lib" //复制到lib目录
}

//让gradle支持中文
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnit()
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

build.dependsOn jacocoTestReport

task integrationTest(type: Test) {
    include 'test/java/**'
}
